package com.mvc3;

import java.io.IOException;
import java.util.List;
import java.util.Map;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;

import com.mvc2.Controller;
import com.mvc2.ControllerMapping;

public class ActionServletVer3 extends HttpServlet {
	Logger logger = Logger.getLogger(ActionServletVer3.class);
	private void doService(HttpServletRequest req, HttpServletResponse res)
			throws ServletException, IOException{
		String requestURI = req.getRequestURI();
		logger.info("requestURI: "+requestURI);
		String contextPath = req.getContextPath();
		String command = requestURI.substring(contextPath.length()+1);
		logger.info("command: "+command);
		Controller controller = null;
		ControllerVer3 controller3 = null;
		String crud = req.getParameter("crud");
		logger.info("crud: "+crud);
		try {
			controller = ControllerMapping.getController(command, crud);
			controller3 = ControllerMappingVer3.getController(command, crud);
		} catch (Exception e) {
			e.printStackTrace();
		}
		logger.info("controller3: "+controller3);
		//*********************응답 페이지*********************//
		if(controller3 instanceof SNSController) {
			logger.info("SNSController 호출성공");
			try {
				ModelAndView mav = controller3.execute(req, res);
				String viewName = mav.viewName;
				List<Map<String, Object>> rList = mav.reqList;
				req.setAttribute("list", rList);
				RequestDispatcher view = req.getRequestDispatcher(viewName);
				view.forward(req, res);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		if(controller instanceof RestController) {
			logger.info("RestController 일 경우......");
			try {
				String rev = controller.execute(req, res);
				req.setAttribute("jsonStr", rev);
				RequestDispatcher view = req.getRequestDispatcher("/json/toJsonPrinter.jsp");
				view.forward(req, res);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		else if(controller!=null && controller instanceof RestController) {
			String pageMove[] = null;
			try {
				String ret = controller.execute(req, res);
				pageMove = ret.split(":");
				for(int i=0;i<pageMove.length;i++) {
					logger.info(pageMove[i]);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			if(pageMove!=null) {
				String path = pageMove[1];
				if("redirect".equals(pageMove[0])) {
					res.sendRedirect(path);
				}
				else {			
					if("forward".equals(pageMove[0])) {
						RequestDispatcher view =
								req.getRequestDispatcher(path);
						view.forward(req, res);
					}else {
						res.sendRedirect("/error/pageMoveFail.jsp");
					}
				}
			}
		}
		logger.info("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeEND OF ACTIONnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn");
	}
	public void doGet(HttpServletRequest req, HttpServletResponse res)
			throws ServletException, IOException{
		doService(req,res);
	}
	public void doPost(HttpServletRequest req, HttpServletResponse res)
			throws ServletException, IOException{
		doService(req,res);
	}
}
